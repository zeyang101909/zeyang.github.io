<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>泽阳的技术博客</title>
  
  <subtitle>记录日常工作</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-24T14:12:02.067Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>泽阳</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式</title>
    <link href="http://yoursite.com/2019/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/06/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2019-06-24T13:24:45.000Z</published>
    <updated>2020-05-24T14:12:02.067Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所使用，软件开发人员在软件开发过程中面临 的一般问题的解决方案。这些解决方案时众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><h4 id="GOF"><a href="#GOF" class="headerlink" title="GOF"></a>GOF</h4><p>GOF 主要是基于一下的面向对象设计原则</p><ul><li>对接口编程而不是对实现编程</li><li>优先使用对象组合而不是继承</li></ul><p>学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。<br><strong>设计模式 - 可复用的面向对象软件元素</strong>中所提到的，总共有23中设计模式。这些设计模式可以分为三大类:创建型模式、结构型模式、行为型模式。</p><h3 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h3><ul><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）<h3 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h3></li><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul><h3 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h3><p>设计模式的六大原则<br>1、开闭原则（Open Close Principle）</p><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><p>2、里氏代换原则（Liskov Substitution Principle）</p><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><p>3、依赖倒转原则（Dependence Inversion Principle）</p><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><p>4、接口隔离原则（Interface Segregation Principle）</p><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><p>5、迪米特法则，又称最少知道原则（Demeter Principle）</p><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><p>6、合成复用原则（Composite Reuse Principle）</p><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h3&gt;&lt;p&gt;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所使用，软件开发人员在软件开发
      
    
    </summary>
    
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>IOS</title>
    <link href="http://yoursite.com/2017/12/02/IOS/"/>
    <id>http://yoursite.com/2017/12/02/IOS/</id>
    <published>2017-12-02T13:01:24.000Z</published>
    <updated>2020-05-24T13:12:06.325Z</updated>
    
    <content type="html"><![CDATA[<p>ios测试<br><img src="http://img.51timetravel.com/img/2020/05/24/111.png" alt="111"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ios测试&lt;br&gt;&lt;img src=&quot;http://img.51timetravel.com/img/2020/05/24/111.png&quot; alt=&quot;111&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="IOS" scheme="http://yoursite.com/categories/IOS/"/>
    
    
      <category term="IOS" scheme="http://yoursite.com/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo创建技术博客</title>
    <link href="http://yoursite.com/2017/12/02/hello-world/"/>
    <id>http://yoursite.com/2017/12/02/hello-world/</id>
    <published>2017-12-02T13:01:24.000Z</published>
    <updated>2020-05-24T13:35:42.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一个新文章"><a href="#创建一个新文章" class="headerlink" title="创建一个新文章"></a>创建一个新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>更多信息见: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="本地服务运行"><a href="#本地服务运行" class="headerlink" title="本地服务运行"></a>本地服务运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多详情请见: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多详情请见: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多详情请见: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hello World <span class="comment">#标题</span></span><br><span class="line"> date: 2017-12-02 21:01:24 <span class="comment">#时间</span></span><br><span class="line"> categories: <span class="string">"分类"</span> <span class="comment">#分类名称</span></span><br><span class="line"> tags: </span><br><span class="line">     - 标签1</span><br><span class="line">     - 标签2</span><br></pre></td></tr></table></figure><h4 id="清除和发布"><a href="#清除和发布" class="headerlink" title="清除和发布"></a>清除和发布</h4><p>hexo clean &amp;&amp; hexo deploy</p><h4 id="关于图片显示问题可以使用云存储或者自己搭建图床在博客中进行显示"><a href="#关于图片显示问题可以使用云存储或者自己搭建图床在博客中进行显示" class="headerlink" title="关于图片显示问题可以使用云存储或者自己搭建图床在博客中进行显示"></a>关于图片显示问题可以使用云存储或者自己搭建图床在博客中进行显示</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;headerlink&quot; title=&quot;快速开始&quot;&gt;&lt;/a&gt;快速开始&lt;/h2&gt;&lt;h3 id=&quot;创建一个新文章&quot;&gt;&lt;a href=&quot;#创建一个新文章&quot; class=&quot;headerlink&quot; title=&quot;创建一
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="创建博客" scheme="http://yoursite.com/tags/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
